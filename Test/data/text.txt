app.py:
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from datetime import datetime, timedelta
import os
import random
import string
import qrcode
from functools import wraps

app = Flask(__name__)
app.config.from_object('config.Config')
db = SQLAlchemy(app)
bcrypt = Bcrypt(app)


# 用户模型
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), nullable=False, unique=True)
    password = db.Column(db.String(150), nullable=False)
    expiration_date = db.Column(db.DateTime, nullable=True)
    subscription_link = db.Column(db.String(200), nullable=True, unique=True)

    def __repr__(self):
        return f"<User {self.username}>"


# 用户登录验证装饰器
def user_login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_logged_in' not in session:
            flash("请先登录", "danger")
            return redirect(url_for('user_login'))
        return f(*args, **kwargs)

    return decorated_function


# 管理员登录验证装饰器
def admin_login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'admin_logged_in' not in session:
            flash("请先登录", "danger")
            return redirect(url_for('login'))
        return f(*args, **kwargs)

    return decorated_function

@app.route('/')
def index():
    # 定义视频列表
    videos = [
        {'id': 'Video1', 'title': '视频1', 'filename': '03-为什么代码看懂，却不会写？.mp4'},
        {'id': 'Video2', 'title': '视频2', 'filename': '03-为什么代码看懂，却不会写？.mp4'},
        {'id': 'Video3', 'title': '视频3', 'filename': '03-为什么代码看懂，却不会写？.mp4'},
    ]
    return render_template('index.html', videos=videos)


@app.route('/admin', methods=['GET', 'POST'])
@admin_login_required
def admin():
    if request.method == 'POST':
        if 'username' in request.form and 'password' in request.form:
            hashed_password = bcrypt.generate_password_hash(request.form['password']).decode('utf-8')
            expiration_days = int(request.form.get('expiration_days', 30))
            expiration_date = datetime.now() + timedelta(days=expiration_days)
            subscription_link = generate_subscription_link()

            new_user = User(
                username=request.form['username'],
                password=hashed_password,
                expiration_date=expiration_date,
                subscription_link=subscription_link
            )
            db.session.add(new_user)
            db.session.commit()
            flash('用户已创建', 'success')

        elif 'delete_user' in request.form:
            user = User.query.get(request.form['delete_user'])
            if user:
                db.session.delete(user)
                db.session.commit()
                flash('用户已删除', 'success')

        elif 'extend_expiration' in request.form:
            user = User.query.get(request.form['extend_expiration'])
            additional_days = int(request.form.get('additional_days', 0))
            if user:
                user.expiration_date += timedelta(days=additional_days)
                db.session.commit()
                flash('有效期已更新', 'success')

    users = User.query.all()
    return render_template('admin.html', users=enumerate(users, start=1))


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form.get('username') == 'admin' and request.form.get('password') == 'admin':
            session['admin_logged_in'] = True
            flash('登录成功', 'success')
            return redirect(url_for('admin'))
        else:
            flash('用户名或密码错误', 'danger')
    return render_template('login.html')


@app.route('/user_login', methods=['GET', 'POST'])
def user_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and bcrypt.check_password_hash(user.password, password):
            if user.expiration_date < datetime.now():
                flash('您的账户已过期，请购买', 'warning')
                return redirect(url_for('purchase'))
            else:
                session['user_logged_in'] = True
                session['user_id'] = user.id
                flash('用户登录成功', 'success')
                return redirect(url_for('subscription'))
        else:
            flash('用户名或密码错误', 'danger')
    return render_template('user_login.html')


@app.route('/logout')
def logout():
    session.pop('admin_logged_in', None)
    session.pop('user_logged_in', None)
    session.pop('user_id', None)
    flash("已退出登录", "info")
    return redirect(url_for('login'))


@app.route('/subscription')
@user_login_required
def subscription():
    user_id = session.get('user_id')
    user = User.query.get(user_id)
    if not user:
        return "用户不存在", 404

    if user.expiration_date < datetime.now():
        flash('您的账户已过期，请购买', 'warning')
        return redirect(url_for('purchase'))

    # 计算剩余天数
    remaining_days = (user.expiration_date - datetime.now()).days

    # 生成用户的专属订阅链接
    subscription_url = url_for('get_subscription_file', subscription_link=user.subscription_link, _external=True)

    # 生成订阅链接二维码
    qr = qrcode.make(subscription_url)
    qr_path = f"static/qrcodes/{user.subscription_link}.png"
    qr.save(qr_path)

    return render_template('subscription.html', user=user, subscription_url=subscription_url,
                           remaining_days=remaining_days, qr_path=qr_path)

@app.route('/purchase', methods=['GET', 'POST'])
def purchase():
    return render_template('purchase.html')

@app.route('/subscription/<subscription_link>.yml')
def get_subscription_file(subscription_link):
    # 验证订阅链接是否有效
    user = User.query.filter_by(subscription_link=subscription_link).first()
    if not user or user.expiration_date < datetime.now():
        return "订阅链接已失效或无效", 404

    # 返回本地的 YAML 文件
    return send_file('iggfeed.yaml', mimetype='application/x-yaml')


def generate_subscription_link():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))


if __name__ == '__main__':
    # 创建静态目录用于存储二维码图像
    os.makedirs('static/qrcodes', exist_ok=True)
    db.create_all()
    # app.run(debug=True)
    app.run()

config.py:
import os

class Config:
    SECRET_KEY = os.urandom(24)
    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

index.html:
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title>主页</title>
    <!-- 引入基础样式表 -->
    <link rel="stylesheet" href="{{ url_for('static', filename='base.css') }}">
    <!-- 引入自定义的样式表 -->
    <link rel="stylesheet" href="{{ url_for('static', filename='index.css') }}">
    <!-- 使用 Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
<div class="container">
    <!-- 导航栏 -->
    <nav class="navbar">
        <a href="{{ url_for('index') }}" class="logo">AI悦创·编程1v1</a>
        <ul class="nav-links">
            <li><a href="{{ url_for('index') }}">主页</a></li>
            <li><a href="{{ url_for('user_login') }}">用户登录</a></li>
            <li><a href="{{ url_for('login') }}">管理员登录</a></li>
            <li><a href="{{ url_for('purchase') }}">购买</a></li>
        </ul>
    </nav>

    <!-- 页面标题 -->
    <h1>欢迎来到我们的网站</h1>

    <!-- 选项卡 -->
    <div class="tabs">
        <ul class="tab-links">
            {% for video in videos %}
                <li><a href="#{{ video.id }}" class="{% if loop.first %}active{% endif %}">{{ video.title }}</a></li>
            {% endfor %}
        </ul>

        <!-- 选项卡内容 -->
        <div class="tab-content">
            {% for video in videos %}
                <div id="{{ video.id }}" class="tab {% if loop.first %}active{% endif %}">
                    <h2>{{ video.title }}</h2>
                    <video controls>
                        <source src="{{ url_for('static', filename='video/' + video.filename) }}" type="video/mp4">
                        您的浏览器不支持 HTML5 视频。
                    </video>
                </div>
            {% endfor %}
        </div>
    </div>

    <!-- 页脚 -->
    <footer class="footer">
        <p>&copy; 2023 MyWebsite. All Rights Reserved.</p>
    </footer>
</div>

<!-- JavaScript -->
<script>
    // 选项卡切换功能
    document.addEventListener('DOMContentLoaded', function () {
        const tabLinks = document.querySelectorAll('.tab-links a');
        const tabs = document.querySelectorAll('.tab-content .tab');

        tabLinks.forEach(function (link) {
            link.addEventListener('click', function (e) {
                e.preventDefault();

                // 移除所有激活状态
                tabLinks.forEach(function (item) {
                    item.classList.remove('active');
                });
                tabs.forEach(function (tab) {
                    tab.classList.remove('active');
                });

                // 激活当前选项卡
                this.classList.add('active');
                const activeTab = document.querySelector(this.getAttribute('href'));
                activeTab.classList.add('active');
            });
        });
    });
</script>

</body>
</html>

index.css:
/* index.css */

/* 导航栏样式 */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
}

.navbar .logo {
    font-size: 24px;
    font-weight: bold;
    color: #1d1d1f;
    text-decoration: none;
}

.navbar .nav-links {
    list-style: none;
    display: flex;
    margin: 0;
}

.navbar .nav-links li {
    margin-left: 20px;
}

.navbar .nav-links a {
    text-decoration: none;
    color: #007aff;
    font-weight: 500;
    transition: color 0.3s;
}

.navbar .nav-links a:hover {
    color: #0056b3;
}

/* 页面标题样式 */
h1 {
    margin-top: 20px;
    font-size: 32px;
    color: #1d1d1f;
    text-align: center;
}

/* 选项卡样式 */
.tabs {
    margin-top: 40px;
}

.tab-links {
    list-style: none;
    display: flex;
    justify-content: center;
    padding: 0;
}

.tab-links li {
    margin: 0 10px;
}

.tab-links a {
    text-decoration: none;
    padding: 10px 20px;
    background-color: #e5e5ea;
    color: #333;
    border-radius: 8px;
    transition: background-color 0.3s;
}

.tab-links a.active,
.tab-links a:hover {
    background-color: #d1d1d6;
}

.tab-content .tab {
    display: none;
}

.tab-content .tab.active {
    display: block;
    margin-top: 20px;
}

.tab-content h2 {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
    color: #1d1d1f;
}

/* 视频样式 */
video {
    width: 100%;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* 页脚样式 */
.footer {
    margin-top: 40px;
    padding-top: 20px;
    border-top: 1px solid #e5e5ea;
    text-align: center;
}

.footer p {
    color: #8e8e93;
    font-size: 14px;
}

/* 响应式设计 */
@media (max-width: 768px) {
    .navbar {
        flex-direction: column;
        align-items: flex-start;
    }

    .navbar .nav-links {
        flex-direction: column;
        width: 100%;
    }

    .navbar .nav-links li {
        margin: 10px 0;
    }

    .tab-links {
        flex-direction: column;
        align-items: center;
    }

    .tab-links li {
        margin: 5px 0;
    }
}

